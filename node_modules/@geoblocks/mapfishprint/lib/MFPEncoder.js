import { getWmtsMatrices, asOpacity, getWmtsUrl } from "./utils.js";
import { drawFeaturesToContext, createCoordinateToPixelTransform } from "./mvtUtils.js";
import TileLayer from 'ol/layer/Tile.js';
import WMTSSource from 'ol/source/WMTS.js';
import TileWMSSource from 'ol/source/TileWMS.js';
import OSMSource from 'ol/source/OSM.js';
import { getWidth as getExtentWidth, getHeight as getExtentHeight } from 'ol/extent.js';
import ImageLayer from 'ol/layer/Image.js';
import ImageWMSSource from 'ol/source/ImageWMS.js';
import { toDegrees } from 'ol/math.js';
import VectorTileLayer from 'ol/layer/VectorTile.js';
import VectorLayer from 'ol/layer/Vector.js';
import VectorEncoder from "./VectorEncoder.js";
import { toContext } from 'ol/render.js';
/**
 * Converts OpenLayers map / layers to Mapfish print v3 format.
 */
export default class MFPBaseEncoder {
    url;
    scratchCanvas = document.createElement('canvas');
    /**
     *
     * @param printUrl The base URL to a mapfish print server / proxy
     */
    constructor(printUrl) {
        this.url = printUrl;
    }
    /**
     *
     * @param options
     * @return the map portion of a Mapfish print spec
     */
    async encodeMap(options) {
        const view = options.map.getView();
        const center = view.getCenter();
        const projection = view.getProjection().getCode();
        const rotation = toDegrees(view.getRotation());
        const mapLayerGroup = options.map.getLayerGroup();
        const layers = await this.encodeLayerGroup(mapLayerGroup, options.printResolution, options.customizer);
        return {
            center,
            dpi: options.dpi,
            projection,
            rotation,
            scale: options.scale,
            layers,
        };
    }
    /**
     *
     * @param layerGroup The top level layer group of a map
     * @param printResolution
     * @param customizer
     * @return a list of Mapfish print layer specs
     */
    async encodeLayerGroup(layerGroup, printResolution, customizer) {
        const layerStates = layerGroup
            .getLayerStatesArray()
            .filter(customizer.layerFilter)
            .sort((state, nextState) => (state.zIndex || 0) - (nextState.zIndex || 0))
            .reverse();
        const layers = [];
        for (const layerState of layerStates) {
            const spec = await this.encodeLayerState(layerState, printResolution, customizer);
            if (spec) {
                if (Array.isArray(spec)) {
                    layers.push(...spec);
                }
                else {
                    layers.push(spec);
                }
            }
        }
        return layers;
    }
    /**
     * Encodes a given OpenLayers layerState to Mapfish print format.
     * @param layerState
     * @param printResolution
     * @param customizer
     * @return a spec fragment
     */
    async encodeLayerState(layerState, printResolution, customizer) {
        if (!layerState.visible ||
            printResolution < layerState.minResolution ||
            printResolution >= layerState.maxResolution) {
            return null;
        }
        const layer = layerState.layer;
        if (layer instanceof ImageLayer) {
            return this.encodeImageLayerState(layerState, customizer);
        }
        if (layer instanceof VectorLayer) {
            const encoded = new VectorEncoder(layerState, customizer).encodeVectorLayer(printResolution);
            const renderAsSvg = layerState.layer.get('renderAsSvg');
            if (renderAsSvg !== undefined) {
                encoded.renderAsSvg = renderAsSvg;
            }
            return encoded;
        }
        if (layer instanceof TileLayer) {
            return this.encodeTileLayerState(layerState, customizer);
        }
        if (layer instanceof VectorTileLayer) {
            return await this.encodeMVTLayerState(layerState, printResolution, customizer);
        }
        return null;
    }
    /**
     * @returns An Encoded WMS Image layer from an Image Layer (high level method).
     */
    encodeImageLayerState(layerState, customizer) {
        const layer = layerState.layer;
        if (!(layer instanceof ImageLayer)) {
            console.assert(layer instanceof ImageLayer);
        }
        const source = layer.getSource();
        if (source instanceof ImageWMSSource) {
            return this.encodeImageWmsLayerState(layerState, customizer);
        }
        return null;
    }
    /**
     * @returns An Encoded WMS Image layer from an Image WMS Source (high level method).
     */
    encodeImageWmsLayerState(layerState, customizer) {
        const layer = layerState.layer;
        const source = layer.getSource();
        console.assert(source instanceof ImageWMSSource);
        const url = source.getUrl();
        if (url !== undefined) {
            return this.encodeWmsLayerState(layerState, url, source.getParams(), customizer);
        }
        return null;
    }
    /**
     * @returns An Encoded WMS Image layer from an Image WMS Source.
     */
    encodeWmsLayerState(layerState, url, params, customizer) {
        const layer = layerState.layer;
        // Pass all WMS params, but not the one standard one that are handled by mapfishprint
        const customParams = { ...params };
        ['SERVICE', 'REQUEST', 'FORMAT', 'LAYERS', 'VERSION', 'STYLES'].forEach((p) => delete customParams[p]);
        return {
            name: layer.get('name'),
            baseURL: url,
            imageFormat: params.FORMAT,
            layers: params.LAYERS.split(','),
            customParams,
            serverType: 'mapserver',
            type: 'wms',
            opacity: layer.getOpacity(),
            version: params.VERSION,
            useNativeAngle: true,
            styles: params.STYLES?.split(',') ?? [''],
        };
    }
    /**
     * Encodes a tile layerState (high level method)
     * @param layerState
     * @param customizer
     * @return a spec fragment
     */
    encodeTileLayerState(layerState, customizer) {
        const layer = layerState.layer;
        console.assert(layer instanceof TileLayer);
        const source = layer.getSource();
        if (source instanceof WMTSSource) {
            return this.encodeTileWmtsLayerState(layerState, customizer);
        }
        if (source instanceof TileWMSSource) {
            return this.encodeTileWmsLayerState(layerState, customizer);
        }
        if (source instanceof OSMSource) {
            return this.encodeOSMLayerState(layerState, customizer);
        }
        return null;
    }
    /**
     * Encodes a tiled WMS layerState as a MFPWmsLayer
     * @param layerState
     * @param customizer
     * @return a spec fragment
     */
    encodeTileWmsLayerState(layerState, customizer) {
        const layer = layerState.layer;
        console.assert(layer instanceof TileLayer);
        const source = layer.getSource();
        console.assert(source instanceof TileWMSSource);
        const urls = source.getUrls();
        console.assert(!!urls);
        const wmsLayer = this.encodeWmsLayerState(layerState, urls[0], source.getParams(), customizer);
        customizer.wmsLayer(layerState, wmsLayer, source);
        return wmsLayer;
    }
    /**
     * Encodes an OSM layerState
     * @param layerState
     * @param customizer
     * @return a spec fragment
     */
    encodeOSMLayerState(layerState, customizer) {
        const layer = layerState.layer;
        const source = layer.getSource();
        return {
            type: 'osm',
            baseURL: source.getUrls()[0],
            opacity: layerState.opacity,
            name: layer.get('name'),
        };
    }
    /**
     * Encodes a WMTS layerState
     * @param layerState
     * @param customizer
     * @return a spec fragment
     */
    encodeTileWmtsLayerState(layerState, customizer) {
        const layer = layerState.layer;
        console.assert(layer instanceof TileLayer);
        const source = layer.getSource();
        console.assert(source instanceof WMTSSource);
        const dimensionParams = source.getDimensions();
        const dimensions = Object.keys(dimensionParams);
        const wmtsLayer = {
            type: 'wmts',
            baseURL: getWmtsUrl(source),
            dimensions,
            dimensionParams,
            imageFormat: source.getFormat(),
            name: layer.get('name'),
            layer: source.getLayer(),
            matrices: getWmtsMatrices(source),
            matrixSet: source.getMatrixSet(),
            opacity: layerState.opacity,
            requestEncoding: source.getRequestEncoding(),
            style: source.getStyle(),
            version: source.getVersion(),
        };
        customizer.wmtsLayer(layerState, wmtsLayer, source);
        return wmtsLayer;
    }
    /**
     * @param layerState An MVT layer state
     * @param printResolution
     * @param customizer
     * @return a spec fragment
     */
    async encodeMVTLayerState(layerState, printResolution, customizer) {
        const layer = layerState.layer;
        const { MVTEncoder } = await import('@geoblocks/print');
        const encoder = new MVTEncoder();
        const printExtent = customizer.getPrintExtent();
        const width = getExtentWidth(printExtent) / printResolution;
        const height = getExtentHeight(printExtent) / printResolution;
        const canvasSize = [width, height];
        const printOptions = {
            layer,
            printExtent: customizer.getPrintExtent(),
            tileResolution: printResolution,
            styleResolution: printResolution,
            canvasSize: canvasSize,
        };
        const results = await encoder.encodeMVTLayer(printOptions);
        return results
            .filter((resut) => resut.baseURL.length > 6)
            .map((result) => Object.assign({
            type: 'image',
            name: layer.get('name'),
            opacity: 1,
            imageFormat: 'image/png',
        }, result));
    }
    /**
     * Encodes Image layerState.
     * @param layerState
     * @param resolution
     * @param customizer
     * @return a spec file
     */
    async encodeAsImageLayer(layerState, resolution, customizer, additionalDraw) {
        const layer = layerState.layer;
        const printExtent = customizer.getPrintExtent();
        const width = getExtentWidth(printExtent) / resolution;
        const height = getExtentHeight(printExtent) / resolution;
        const size = [width, height];
        const vectorContext = toContext(this.scratchCanvas.getContext('2d'), {
            size,
            pixelRatio: 1,
        });
        const coordinateToPixelTransform = createCoordinateToPixelTransform(printExtent, resolution, size);
        const features = layer.getSource().getFeatures();
        const styleFunction = layer.getStyleFunction();
        drawFeaturesToContext(features, styleFunction, resolution, coordinateToPixelTransform, vectorContext, additionalDraw);
        return {
            type: 'image',
            extent: printExtent,
            imageFormat: 'image/png', // this is the target image format in the mapfish-print
            opacity: 1, // FIXME: mapfish-print is not handling the opacity correctly for images with dataurl.
            name: layer.get('name'),
            baseURL: asOpacity(this.scratchCanvas, layer.getOpacity()).toDataURL('PNG'),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,