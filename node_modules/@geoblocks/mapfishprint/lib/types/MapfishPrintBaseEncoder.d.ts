import type { Transform } from 'ol/transform';
import type { Extent } from 'ol/extent';
import type BaseCustomizer from './BaseCustomizer';
import type Map from 'ol/Map';
import type { MapFishPrintLayer, MapFishPrintMap, MapFishPrintReportResponse, MapFishPrintSpec, MapFishPrintStatusResponse, MapFishPrintWmtsLayer } from './mapfishprintTypes';
import type { Feature } from 'ol';
import type { StyleFunction } from 'ol/style/Style';
import type VectorContext from 'ol/render/VectorContext';
import type { Geometry } from 'ol/geom';
import type { State } from 'ol/layer/Layer';
export declare function asOpacity(canvas: HTMLCanvasElement, opacity: number): HTMLCanvasElement;
export default abstract class MapfishPrintBaseEncoder {
    readonly url: string;
    /**
     * Provides a function to create app.print.Service objects used to
     * interact with MapFish Print v3 services.
     *
     */
    constructor(printUrl: string);
    createSpec(map: Map, scale: number, printResolution: number, dpi: number, layout: string, format: string, customAttributes: Record<string, any>, customizer: BaseCustomizer): Promise<MapFishPrintSpec>;
    getStatus(ref: string): Promise<MapFishPrintStatusResponse>;
    requestReport(spec: MapFishPrintSpec): Promise<MapFishPrintReportResponse>;
    getDownloadUrl(response: MapFishPrintReportResponse, interval?: number): Promise<string>;
    mapToLayers(map: Map, printResolution: number, customizer: BaseCustomizer): Promise<MapFishPrintLayer[]>;
    abstract encodeMap(map: Map, scale: number, printResolution: number, dpi: number, customizer: BaseCustomizer): Promise<MapFishPrintMap>;
    abstract encodeLayer(layerState: State, printResolution: number, customizer: BaseCustomizer): Promise<MapFishPrintLayer[] | MapFishPrintLayer | null>;
    encodeTileLayer(layerState: State, customizer: BaseCustomizer): MapFishPrintWmtsLayer;
    encodeTileWmtsLayer(layerState: State, customizer: BaseCustomizer): MapFishPrintWmtsLayer;
    drawFeaturesToContext(features: Feature[], styleFunction: StyleFunction | undefined, resolution: number, coordinateToPixelTransform: Transform, vectorContext: VectorContext, additionalDraw: (geometry: Geometry) => void): void;
    createCoordinateToPixelTransform(printExtent: Extent, resolution: number, size: number[]): Transform;
    abstract encodeAsImageLayer(layerState: State, resolution: number, customizer: BaseCustomizer): void;
}
//# sourceMappingURL=MapfishPrintBaseEncoder.d.ts.map