/* global test, expect */
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import VectorTileSource from 'ol/source/VectorTile.js';
import { getHeight, getWidth } from 'ol/extent.js';
import { createWorldToVectorContextTransform, listTilesCoveringExtentAtResolution, } from './encodeutils';
import { fromLonLat } from 'ol/proj.js';
import { transform2D } from 'ol/geom/flat/transform.js';
var LV03_EXTENT = [420000, 30000, 900000, 350000];
var LV03_W = getWidth(LV03_EXTENT);
var LV03_H = getHeight(LV03_EXTENT);
test('WorldToVectorContextTransform', function () {
    // ratio 3 / 2 comes from the Swiss extent dimensions
    var tr = createWorldToVectorContextTransform(LV03_EXTENT, 3, 2);
    expect(transform2D(LV03_EXTENT, 0, 4, 2, tr)).toStrictEqual([0, 2, 3, 0]); //
    expect(transform2D([5 * LV03_W + LV03_EXTENT[0], 5 * LV03_H + LV03_EXTENT[1]], 0, 2, 2, tr)).toStrictEqual([
        5 * 3, // the bottom left x is translated to the right of 5 canvas widths
        2 - 5 * 2, // the bottom left y (2 in CSS coordinates) is tranlated to the top of 5 canvas heights
    ]);
    var tr2 = createWorldToVectorContextTransform(LV03_EXTENT, 3000, 2000); // canvas is 1000x bigger
    expect(transform2D(LV03_EXTENT, 0, 4, 2, tr2)).toStrictEqual([
        0, 2000, 3000, 0,
    ]); // result is scaled 1000x
    expect(transform2D([5 * LV03_W + LV03_EXTENT[0], 5 * LV03_H + LV03_EXTENT[1]], 0, 2, 2, tr2)).toStrictEqual([15000, -8000]);
});
test('listTiles', function () {
    var printExtent = __spreadArray(__spreadArray([], fromLonLat([6.536781518249511, 46.498738845229354]), true), fromLonLat([6.608278481750488, 46.527977222198444]), true);
    var printResolution = 42;
    var tileGrid = new VectorTileSource({
        maxZoom: 15,
    }).getTileGrid();
    var tiles = listTilesCoveringExtentAtResolution(printExtent, printResolution, tileGrid);
    expect(tiles).toEqual([
        {
            'coord': [10, 530, 362],
            'extent': [
                704443.6526761837, 5831228.013819527, 743579.411158194,
                5870363.772301537,
            ],
        },
    ]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jb2RldXRpbHMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9lbmNvZGV1dGlscy5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHlCQUF5Qjs7Ozs7Ozs7OztBQUV6QixPQUFPLGdCQUFnQixNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBUyxTQUFTLEVBQUUsUUFBUSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ3pELE9BQU8sRUFDTCxtQ0FBbUMsRUFDbkMsbUNBQW1DLEdBQ3BDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBRXRELElBQU0sV0FBVyxHQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUQsSUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3JDLElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUV0QyxJQUFJLENBQUMsK0JBQStCLEVBQUU7SUFDcEMscURBQXFEO0lBQ3JELElBQU0sRUFBRSxHQUFHLG1DQUFtQyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFbEUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUM3RSxNQUFNLENBQ0osV0FBVyxDQUNULENBQUMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDMUQsQ0FBQyxFQUNELENBQUMsRUFDRCxDQUFDLEVBQ0QsRUFBRSxDQUNILENBQ0YsQ0FBQyxhQUFhLENBQUM7UUFDZCxDQUFDLEdBQUcsQ0FBQyxFQUFFLGtFQUFrRTtRQUN6RSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSx1RkFBdUY7S0FDbkcsQ0FBQyxDQUFDO0lBRUgsSUFBTSxHQUFHLEdBQUcsbUNBQW1DLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLHlCQUF5QjtJQUNuRyxNQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUMzRCxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO0tBQ2pCLENBQUMsQ0FBQyxDQUFDLHlCQUF5QjtJQUM3QixNQUFNLENBQ0osV0FBVyxDQUNULENBQUMsQ0FBQyxHQUFHLE1BQU0sR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDMUQsQ0FBQyxFQUNELENBQUMsRUFDRCxDQUFDLEVBQ0QsR0FBRyxDQUNKLENBQ0YsQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLFdBQVcsRUFBRTtJQUNoQixJQUFNLFdBQVcsR0FBRyxnQ0FDZixVQUFVLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLFNBQ25ELFVBQVUsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLGtCQUFrQixDQUFDLENBQUMsT0FDN0MsQ0FBQztJQUNaLElBQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQztJQUMzQixJQUFNLFFBQVEsR0FBRyxJQUFJLGdCQUFnQixDQUFDO1FBQ3BDLE9BQU8sRUFBRSxFQUFFO0tBQ1osQ0FBQyxDQUFDLFdBQVcsRUFBRyxDQUFDO0lBQ2xCLElBQU0sS0FBSyxHQUFHLG1DQUFtQyxDQUMvQyxXQUFXLEVBQ1gsZUFBZSxFQUNmLFFBQVEsQ0FDVCxDQUFDO0lBQ0YsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNwQjtZQUNFLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO1lBQ3ZCLFFBQVEsRUFBRTtnQkFDUixpQkFBaUIsRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0I7Z0JBQ3RELGlCQUFpQjthQUNsQjtTQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMifQ==